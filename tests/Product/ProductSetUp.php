<?php


namespace Product;

use App\Models\Product;
use GuzzleHttp\Client;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\ResponseInterface;

class ProductSetUp extends TestCase
{
    /** @var Client */
    protected $client;

    /** @var Product */
    protected $product;
    /**
     * @var \GuzzleHttp\Promise\PromiseInterface
     */
    protected $response;

    protected const URL = 'http://127.0.0.1:8888';

    protected const PATH = '/products';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->client = new Client([
            'base_uri' => self::URL
        ]);

        $promise = $this->client
            ->postAsync(self::PATH, [
                'json' => [
                    'name' => 'Test', 'price' => 100
                ]
            ])
            ->then(
                function (ResponseInterface $response) {
                    $this->response = $response->getBody()->getContents();
                }
            )
            ->otherwise(
                function (\Exception $exception) {
                    $this->response = $exception->getMessage();
                }
            );

        $promise->wait();

        $this->product = $this->getProductFromResponse();
    }

    /**
     * @return Product|mixed
     */
    private function getProductFromResponse()
    {
        $product = json_decode($this->response);
        $product = new Product((int)$product->id, $product->name, (float)$product->price);

        return $product;
    }

    protected function tearDown(): void
    {

        $promise = $this->client
            ->deleteAsync(self::PATH . '/' . $this->product->id)
            ->then(
                function (ResponseInterface $response) {
                    $this->response = $response->getBody()->getContents();
                }
            )
            ->otherwise(
                function (\Exception $exception) {
                    $this->response = $exception->getMessage();
                }
            );

        $promise->wait();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function getExistedProduct()
    {
        $promise = $this->client
            ->getAsync(self::PATH . '/' . $this->product->id)
            ->then(
                function (ResponseInterface $response) {
                    $this->response = $response->getBody()->getContents();
                }
            )
            ->otherwise(
                function (\Exception $exception) {
                    $this->response = $exception->getMessage();
                }
            );

        $promise->wait();

        return $this->getProductFromResponse();
    }
}